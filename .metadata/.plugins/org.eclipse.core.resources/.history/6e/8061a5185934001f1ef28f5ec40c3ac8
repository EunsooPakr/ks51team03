<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
      layout:decorate="~{layout/map_default}">
<head>
    <style>
        #map {
            width: 100%;
            height: 800px;
            float: left;
        }

        #info_wrap {
            width: 30%;
            height: 800px;
            float: left;
            background: rgba(255, 255, 255, 0.7);
            padding: 20px;
            box-sizing: border-box;
        }

        @media (min-width: 1200px) {
            .container {
                max-width: 90%;
            }
        }

        #info_wrap {
            display: none;
        }

        .map_wrap, #info_wrap, .map_wrap * {
            margin: 0;
            padding: 0;
            font-family: 'Malgun Gothic', dotum, '돋움', sans-serif;
            font-size: 12px;
        }

        .map_wrap a, .map_wrap a:hover, #info_wrap, .map_wrap a:active {
            color: #000;
            text-decoration: none;
        }

        .map_wrap {
            position: relative;
            width: 100%;
            height: 800px;
        }

        #menu_wrap {
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            width: 250px;
            margin: 10px 0 30px 10px;
            padding: 5px;
            overflow-y: auto;
            background: rgba(255, 255, 255, 0.7);
            z-index: 1;
            font-size: 12px;
            border-radius: 10px;
        }

        #info_wrap {
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            width: 250px;
            margin: 10px 0 30px 10px;
            padding: 5px;
            overflow-y: auto;
            background: rgba(255, 255, 255, 0.7);
            z-index: 1;
            font-size: 12px;
            border-radius: 10px;
        }

        .bg_white {
            background: #fff;
        }

        #menu_wrap hr {

            height: 1px;
            border: 0;
            border-top: 2px solid #5F5F5F;
            margin: 3px 0;
        }

        #menu_wrap .option {
            text-align: center;
        }

        #menu_wrap .option p {
            margin: 10px 0;
        }

        #menu_wrap .option button {
            margin-left: 5px;
        }

        #placesList li {
            list-style: none;
        }

        #placesList .item {
            position: relative;
            border-bottom: 1px solid #888;
            overflow: hidden;
            cursor: pointer;
            min-height: 65px;
        }

        #placesList .item span {
            display: block;
            margin-top: 4px;
        }

        #placesList .item h5, #placesList .item .info {
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
        }

        #placesList .item .info {
            padding: 10px 0 10px 55px;
        }

        #placesList .info .gray {
            color: #8a8a8a;
        }

        #placesList .info .jibun {
            padding-left: 26px;
            background: url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_jibun.png) no-repeat;
        }

        #placesList .info .tel {
            color: #009900;
        }

        #placesList .item .markerbg {
            float: left;
            position: absolute;
            width: 36px;
            height: 37px;
            margin: 10px 0 0 10px;
            background: url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png) no-repeat;
        }

        #placesList .item .marker_1 {
            background-position: 0 -10px;
        }

        #placesList .item .marker_2 {
            background-position: 0 -56px;
        }

        #placesList .item .marker_3 {
            background-position: 0 -102px;
        }

        #placesList .item .marker_4 {
            background-position: 0 -148px;
        }

        #placesList .item .marker_5 {
            background-position: 0 -194px;
        }

        #placesList .item .marker_6 {
            background-position: 0 -240px;
        }

        #placesList .item .marker_7 {
            background-position: 0 -286px;
        }

        #placesList .item .marker_8 {
            background-position: 0 -332px;
        }

        #placesList .item .marker_9 {
            background-position: 0 -378px;
        }

        #placesList .item .marker_10 {
            background-position: 0 -423px;
        }

        #placesList .item .marker_11 {
            background-position: 0 -470px;
        }

        #placesList .item .marker_12 {
            background-position: 0 -516px;
        }

        #placesList .item .marker_13 {
            background-position: 0 -562px;
        }

        #placesList .item .marker_14 {
            background-position: 0 -608px;
        }

        #placesList .item .marker_15 {
            background-position: 0 -654px;
        }

        #pagination {
            margin: 10px auto;
            text-align: center;
        }

        #pagination a {
            display: inline-block;
            margin-right: 10px;
        }

        #pagination .on {
            font-weight: bold;
            cursor: default;
            color: #777;
        }

        .back_button {
            text-align: left;
        }

        .back_button button {
            background-color: #007BFF;
            color: white;
            border: none;
            padding: 10px;
            cursor: pointer;
        }

        .back_button button:hover {
            background-color: #0056b3;
        }

        .company_image {
            width: 100%;
            height: 150px;
            background-color: orange;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            margin: 10px 0;
        }

        .details {
            text-align: center;
        }

        #placeRating, #parking {
            display: inline-block;
            margin: 10px 20px;
        }

        #placeName {
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0;
        }

        #placeAddress, #placePhone, #employee_count {
            margin: 5px 0;
        }

        hr {
            margin: 20px 0;
        }

        .reviews {
            margin-top: 20px;
        }

        #placeReviews {
            font-weight: bold;
            margin-bottom: 10px;
        }

        .review_list {
            background-color: #28a745;
            color: white;
            padding: 10px;
        }

        .review {
            margin-bottom: 5px;
        }

        .review-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            padding: 10px 0;
        }

        #placeReviews {
            font-size: 16px;
        }

        .write-review-link {
            color: #007BFF !important;
            text-decoration: none;
            margin-left: auto; /* Optional: This will push the link to the far right */
        }

        .write-review-link:hover {
            text-decoration: underline;
        }

        #write-qeustion-link {
            text-align: right;
            display: block;
            margin-left: auto; /* 부모 컨테이너 내에서 오른쪽으로 이동 */
        }

        .search-container {
            width: 100%;
            background: #f1f1f1;
            padding: 10px;
            box-sizing: border-box;
            text-align: center;
            margin-bottom: 20px;
        }

        .search-container input[type="text"] {
            width: 70%;
            padding: 10px;
            margin-right: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }

        .search-container button {
            padding: 10px 20px;
            background-color: #007BFF;
            border: none;
            color: white;
            cursor: pointer;
            border-radius: 4px;
        }

        .search-container button:hover {
            background-color: #0056b3;
        }

    </style>
</head>
<th:block layout:fragment="customContent">
    <div class="main-wrapper home-city">
        <section class="bg-smoke py-12">
            <div class="search_container">
                <div class="search-container">
                    <form action="/map/map_main" method="get">
                        <input type="text" name="keyword" id="keyword" placeholder="검색어를 입력하세요">
                        <button id="searchBtn"  type="submit">검색하기</button>
                    </form>
                </div>
                <div class="map_wrap">
                    <div id="map"></div>
                    <div id="menu_wrap" class="bg_white">
                        <hr>
                        <ul id="placesList"></ul>
                        <div id="pagination"></div>
                    </div>
                    <div id="info_wrap" class="bg_white">
                        <div class="back_button">
                            <button type="button" id="returnMenu_wrap">메뉴출력</button>
                        </div>
                        <div>
                            <div class="company_image">
                                <img id="placeIcon" src="" alt="PAL 업체 등록 이미지">
                            </div>
                            <div class="details">
                                <div id="placeName"></div>
                                <div id="placeRating">별점: 알수없음</div>
                                <div id="parking">주차장: 알수없음</div>
                                <div id="placeAddress"></div>
                                <div id="placePhone"></div>
                                <div id="employee_count">직원 수: 알수없음</div>
                                <div id="placeHours"></div>
                            </div>
                            <a th:href="@{map_write_question}" class="write-review-link" id="write-qeustion-link">문의하기</a>
                            <hr>
                            <div class="reviews">
                                <div class="review-container">
                                    <div id="placeReviews">리뷰: 알수없음</div>
                                    <a th:href="@{map_write_review}" class="write-review-link">리뷰 작성하기</a>
                                </div>
                                <div class="review_list">
                                    <div class="review">리뷰 1: 좋아요</div>
                                    <div class="review">리뷰 2: 싫어요</div>
                                    <!-- 더 많은 리뷰를 추가할 수 있습니다 -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
</th:block>
<!-- 사용자정의 script -->
<th:block layout:fragment="customJs">
    <script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=187a124bab49811facead4006ff52672&libraries=services"></script>
    <script>
        var currentPosition; // 현재 위치를 저장할 변수
        var allResults = []; // 모든 검색 결과를 저장할 배열
        var resultsPerPage = 15; // 페이지당 표시할 결과 수
        var dbPlaces = []; // 데이터베이스 검색 결과를 저장할 배열

        // 현재 위치에 마커 찍는 메서드
        function onGeoOkay(position) {
            var lat = position.coords.latitude;
            var lon = position.coords.longitude;
            currentPosition = new kakao.maps.LatLng(lat, lon);
            console.log("현재 나의 위치: " + currentPosition)
            var marker = new kakao.maps.Marker({
                position: currentPosition
            });

            marker.setMap(map);

            var infowindow = new kakao.maps.InfoWindow({
                content: '<div style="padding:5px;z-index:1;">현재위치</div>'
            });
            infowindow.open(map, marker);

            map.setCenter(currentPosition);
        }

        function onGeoError() {
            alert("I can't find you. No weather for you.");
        }

        navigator.geolocation.getCurrentPosition(onGeoOkay, onGeoError);

        var markers = [];

        var mapContainer = document.getElementById('map'), // 지도를 표시할 div
            mapOption = {
                center: new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표
                level: 3 // 지도의 확대 레벨
            };

        // 지도를 생성합니다
        var map = new kakao.maps.Map(mapContainer, mapOption);

        // 장소 검색 객체를 생성합니다
        var ps = new kakao.maps.services.Places();
        var infowindow = new kakao.maps.InfoWindow({zIndex: 1});
        // 키워드 검색을 요청하는 함수입니다
        $('form').submit(function(event){
            var keyword = document.getElementById('keyword').value;

            if (!keyword.replace(/^\s+|\s+$/g, '')) {
                alert('키워드를 입력해주세요!');
                event.preventDefault(); // 폼 제출을 막습니다
                return false;
            }

            // 검색을 진행합니다
            searchPlaces();

            // 이 부분은 필요에 따라 추가/제거할 수 있습니다.
            event.preventDefault(); // 폼 제출을 막습니다.
        });
        function searchPlaces() {
            var keyword = document.getElementById('keyword').value;

            // 모든 결과를 초기화합니다
            allResults = [];
            dbPlaces = []; // 검색마다 dbPlaces 초기화

            // 데이터베이스 검색 요청
            $.ajax({
                url: "/map/get_company_list",
                type: "GET",
                data: { keyword: keyword },
                success: function(response) {
                    console.log("Received response from server:", response);
                    dbPlaces = response || []; // 응답이 없을 경우 빈 배열 할당

                    // 카카오에서 장소 검색
                    ps.keywordSearch(keyword, placesSearchCB, {page: 1});
                },
                error: function(error) {
                    console.error("Error fetching company list", error);
                }
            });
        }

        document.getElementById('menu_wrap').style.display = 'none';

        // 장소검색이 완료됐을 때 호출되는 콜백함수입니다
        function placesSearchCB(data, status, pagination) {
            if (status === kakao.maps.services.Status.OK) {
                allResults = allResults.concat(data); // 카카오 검색 결과를 allResults에 추가

                if (pagination.current < pagination.last && allResults.length < 45) {
                    pagination.gotoPage(pagination.current + 1);
                } else {
                    combineResults(); // 모든 페이지의 데이터를 다 받았거나 45개를 초과하면 호출
                }
                document.getElementById('menu_wrap').style.display = 'block';
            } else if (status === kakao.maps.services.Status.ZERO_RESULT) {
                alert('검색 결과가 존재하지 않습니다.');
            } else if (status === kakao.maps.services.Status.ERROR) {
                alert('검색 결과 중 오류가 발생했습니다.');
            }
        }

        // 데이터베이스 결과와 카카오 API 결과를 결합하는 함수
        function combineResults() {

            allResults = allResults.concat(dbPlaces);

            processResults(); // 결합된 결과를 처리
        }

        // 모든 검색 결과를 처리하는 함수입니다
        function processResults() {
            // 거리 기준으로 정렬합니다
            if (currentPosition) {
                allResults.sort(function(a, b) {
                    var aDist = getDistance(currentPosition, new kakao.maps.LatLng(a.y, a.x));
                    var bDist = getDistance(currentPosition, new kakao.maps.LatLng(b.y, b.x));
                    return aDist - bDist;
                });
            }
            // 첫 페이지를 표시합니다
            displayPage(1);
            displayPagination(Math.ceil(allResults.length / resultsPerPage));
        }

        // 두 지점 간의 거리를 계산하는 함수입니다
        function getDistance(position1, position2) {
            var R = 6371; // 지구의 반지름 (단위: km)
            var dLat = (position2.getLat() - position1.getLat()) * Math.PI / 180;
            var dLon = (position2.getLng() - position1.getLng()) * Math.PI / 180;
            var lat1 = position1.getLat() * Math.PI / 180;
            var lat2 = position2.getLat() * Math.PI / 180;

            var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            var distance = R * c;
            return distance * 1000; // 결과를 미터로 반환
        }

        // 특정 페이지를 표시하는 함수입니다
        function displayPage(page) {
            var start = (page - 1) * resultsPerPage;
            var end = start + resultsPerPage;
            displayPlaces(allResults.slice(start, end));

            // 페이지 번호 업데이트
            var paginationEl = document.getElementById('pagination');
            var children = paginationEl.children;
            for (var i = 0; i < children.length; i++) {
                if (i + 1 === page) {
                    children[i].className = 'on';
                } else {
                    children[i].className = '';
                }
            }
        }

        // 검색결과 목록 하단에 페이지번호를 표시는 함수입니다
        function displayPagination(totalPages) {
            var paginationEl = document.getElementById('pagination'),
                fragment = document.createDocumentFragment(),
                i;

            // 기존에 추가된 페이지번호를 삭제합니다
            while (paginationEl.hasChildNodes()) {
                paginationEl.removeChild(paginationEl.lastChild);
            }

            for (i = 1; i <= totalPages; i++) {
                var el = document.createElement('a');
                el.href = "#";
                el.innerHTML = i;

                if (i === 1) {
                    el.className = 'on';
                } else {
                    el.onclick = (function(i) {
                        return function() {
                            displayPage(i);
                        }
                    })(i);
                }

                fragment.appendChild(el);
            }
            paginationEl.appendChild(fragment);
        }

        // 검색 결과 목록과 마커를 표출하는 함수입니다
        function displayPlaces(places) {
            // console.log("Places:", places);
            // console.log("DB Places:", dbPlaces);
            console.log(places);
            var listEl = document.getElementById('placesList'),
                menuEl = document.getElementById('menu_wrap'),
                infoCompany = document.getElementById('info_wrap'),
                fragment = document.createDocumentFragment(),
                bounds = new kakao.maps.LatLngBounds(),
                listStr = '';

            // 검색 결과 목록에 추가된 항목들을 제거합니다
            removeAllChildNods(listEl);

            // 지도에 표시되고 있는 마커를 제거합니다
            removeMarker();

            // 첫 번째 마커의 위치를 저장할 변수
            var firstPlacePosition;
            let listIdx = 0;
            // =================== 데이터베이스 데이터 반복 ======================================
            for (var i = 0; i < dbPlaces.length; i++) {

                // 마커를 생성하고 지도에 표시합니다
                var placePosition = currentPosition,
                    marker = addMarker(placePosition, i),
                    itemEl = getDbListItem(i, dbPlaces[i]); // 검색 결과 항목 Element를 생성합니다


                // 첫 번째 장소의 위치를 저장합니다
                if (i === 0) {
                    firstPlacePosition = placePosition;
                }

                // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기 위해 LatLngBounds 객체에 좌표를 추가합니다
                bounds.extend(placePosition);

                itemEl.setAttribute('data-index', i);

                (function(marker, title, idx) {
                    itemEl.onclick = function() {
                        console.log("클릭된 항목의 인덱스:", idx);
                        console.log(dbPlaces[idx])
                        menuEl.style.display = 'none';
                        infoCompany.style.display = 'block';
                        console.log("title: " + dbPlaces[idx].companyName);
                        displayInfowindow(marker, dbPlaces[idx].companyName);
                        map.setCenter(marker.getPosition());
                    };
                })(marker, dbPlaces[i], i);

                fragment.appendChild(itemEl);
            }
            // =================== 데이터베이스 데이터 반복 end ======================================
            // DB 항목을 Element로 반환하는 함수입니다
            function getDbListItem(index, dbPlace) {

                var el = document.createElement('li'),
                    itemStr = '<span class="markerbg marker_' + (index + 1) + '"></span>' +
                        '<div class="info" onclick="showDetails(' + listIdx + ', true)">' +
                        '   <h5>' + dbPlace.companyName + '</h5>';

                if (dbPlace.road_address_name) {
                    itemStr += '    <span>' + dbPlace.road_address_name + '</span>' +
                        '   <span class="jibun gray">' + dbPlace.companyAddr + '</span>';
                } else {
                    itemStr += '    <span>' + dbPlace.companyAddr + '</span>';
                }

                itemStr += '  <span class="tel">' + dbPlace.companyPhone + '</span>' +
                    '</div>';

                el.innerHTML = itemStr;
                el.className = 'item';
                listIdx++;
                return el;
            }

            // =================== 카카오 데이터 반복 start =========================================
            for (i = 0; i < places.length; i++) {
                // 마커를 생성하고 지도에 표시합니다
                placePosition = new kakao.maps.LatLng(places[i].y, places[i].x);

                marker = addMarker(placePosition, i);
                itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다

                itemEl.setAttribute('data-index', i);

                (function(marker, title, idx) {
                    itemEl.onclick = function() {
                        console.log("클릭된 항목의 인덱스:", idx);
                        menuEl.style.display = 'none';
                        infoCompany.style.display = 'block';

                        displayInfowindow(marker, title);
                        map.setCenter(marker.getPosition());
                    };
                })(marker, places[i].place_name, i);

                fragment.appendChild(itemEl);
            }
            // =================== 카카오 데이터 반복 end ===========================================

            // 검색결과 항목들을 검색결과 목록 Element에 추가합니다
            listEl.appendChild(fragment);
            menuEl.scrollTop = 0;

            // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다
            map.setBounds(bounds);

            // 최대 확대 레벨 제한
            var maxZoomLevel = 3; // 최대 확대 레벨 설정
            if (map.getLevel() > maxZoomLevel) {
                map.setLevel(maxZoomLevel);
            }

            // 첫 번째 마커의 위치를 지도의 중심으로 설정합니다
            if (firstPlacePosition) {
                map.setCenter(firstPlacePosition);
            }
            // 카카오 항목을 Element로 반환하는 함수입니다
            function getListItem(index, places) {
                var el = document.createElement('li'),
                    itemStr = '<span class="markerbg marker_' + (index + 1) + '"></span>' +
                        '<div class="info" onclick="showDetails(' + listIdx + ', false)">' +
                        '   <h5>' + places.place_name + '</h5>';

                if (places.road_address_name) {
                    itemStr += '    <span>' + places.road_address_name + '</span>' +
                        '   <span class="jibun gray">' + places.address_name + '</span>';
                } else {
                    itemStr += '    <span>' + places.address_name + '</span>';
                }

                itemStr += '  <span class="tel">' + places.phone + '</span>' +
                    '</div>';

                el.innerHTML = itemStr;
                el.className = 'item';
                listIdx++;
                return el;
            }
        }




        // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다
        function addMarker(position, idx) {
            var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다
                imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기
                imgOptions = {
                    spriteSize: new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기
                    spriteOrigin: new kakao.maps.Point(0, (idx * 46) + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표
                    offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표
                },
                markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),
                marker = new kakao.maps.Marker({
                    position: position, // 마커의 위치
                    image: markerImage
                });

            marker.setMap(map); // 지도 위에 마커를 표출합니다
            markers.push(marker);  // 배열에 생성된 마커를 추가합니다

            return marker;
        }

        // 지도 위에 표시되고 있는 마커를 모두 제거합니다
        function removeMarker() {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(null);
            }
            markers = [];
        }

        function displayInfowindow(marker, title) {
            var content = '<div style="padding:5px;z-index:1;">' + title + '</div>';

            infowindow.setContent(content);
            infowindow.open(map, marker);
        }

        // 검색결과 목록의 자식 Element를 제거하는 함수입니다
        function removeAllChildNods(el) {
            while (el.hasChildNodes()) {
                el.removeChild(el.lastChild);
            }
        }

        function showDetails(index, isDB) {
            var infoWrap = document.getElementById('info_wrap');
            var menuWrap = document.getElementById('menu_wrap');

            if (isDB) {
                var places = dbPlaces[index];
                document.getElementById('placeName').innerText = places.companyName;
                document.getElementById('placeRating').innerText = '별점: ' + places.rating;
                document.getElementById('parking').innerText = '주차장: ' + (places.companyParking ? 'O' : 'X');
                document.getElementById('placeAddress').innerText = places.companyAddr;
                document.getElementById('placePhone').innerText = places.companyPhone;
                document.getElementById('employee_count').innerText = '직원 수: ' + places.companyStfCount;
                document.getElementById('placeReviews').innerText = '리뷰: 알수없음';
            } else {
                var places = allResults[index - dbPlaces.length];
                document.getElementById('placeName').innerText = places.place_name;
                document.getElementById('placeRating').innerText = '별점: 알수없음';
                document.getElementById('parking').innerText = '주차장: 알수없음';
                document.getElementById('placeAddress').innerText = places.address_name;
                document.getElementById('placePhone').innerText = places.phone;
                document.getElementById('employee_count').innerText = '직원 수: 알수없음';
                document.getElementById('placeReviews').innerText = '리뷰: 알수없음';
            }
            menuWrap.style.display = 'none';
            infoWrap.style.display = 'block';
        }
        document.getElementById('returnMenu_wrap').onclick = function() {
            document.getElementById('info_wrap').style.display = 'none';
            document.getElementById('menu_wrap').style.display = 'block';
        };

    </script>
</th:block>
</html>
